---
import { feedURLs } from '../../public/feeds.js';
import '../styles/rss-joy.css';

import { XMLParser } from 'fast-xml-parser';
const parser = new XMLParser();

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

async function rss2data(url: RequestInfo | URL, max = 5) {
	const rssResponse = await fetch(url);
	const rssText = await rssResponse.text();
	const feed = parser.parse(rssText);
	const isNotAtom = feed.rss ? true : false;
	const title = isNotAtom ? feed.rss.channel.title : feed.feed.title;
	const link = isNotAtom ? feed.rss.channel.link : feed.feed.id;
	const posts = isNotAtom ? feed.rss.channel.item : feed.feed.entry;
	let newestFirst = true;
	if (new Date(posts[0].pubDate ?? posts[0].updated).getTime() < new Date(posts[1].pubDate || posts[1].updated).getTime()) {
		newestFirst = false;
	}
	let entries = [];
	if (newestFirst) {
		for (let entry = 0; entry < max; entry++) {
			entries.push({
				"title": posts[entry].title,
				"link": posts[entry].id ?? posts[entry].guid,
				"date": new Date(posts[entry].pubDate ?? posts[entry].updated).toDateString(),
			});
		}
	} else {
		for (let entry = posts.length - 1; entry >= (posts.length - max); entry--) {
			entries.push({
				"title": posts[entry].title,
				"link": posts[entry].id ?? posts[entry].guid,
				"date": new Date(posts[entry].pubDate ?? posts[entry].updated).toDateString(),
			});
		}
	}
	return {
		"title": title,
		"link": link,
		"entries": entries,
	}
}

let rssCards = [];
shuffle(feedURLs);
for (const feedURL of feedURLs) {
	rssCards.push(await rss2data(feedURL));
}

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸŒˆ</text></svg>" />
		<title>RSS JOY</title>
	</head>
	<body>
		<header>
			<h1>RS.S JOY.lol</h1>
			<p>An RSS-some starting page.</p>
		</header>
		<main>
			{rssCards.map((rssCard) => (
				<article style=`--hue: ${Math.round(Math.random() * 360)}`>
					<h2><a href={rssCard.link}>{rssCard.title}</a></h2>
					<ul>
					{rssCard.entries.map((entry: { link: string | URL; title: string; date: string }) => (
						<li>
							<a href={entry.link}>{entry.title}</a><small> &middot; {entry.date}</small>
						</li>
					))}
					</ul>
				</article>
			))}
		</main>
		<footer>
			<div class="info">
				<p>This little RSS aggregator is made in <a href="https://astro.build/">Astro</a>. It outputs a fast, static page.</p>
				<p>It randomises the list of supplied <a href="/feeds.js">feed URLs</a> each time it rebuilds, as well as updating the entries. It uses <a href="https://www.npmjs.com/package/fast-xml-parser">fast-xml-parser</a>.</p>
				<p>Rebuilds are triggered every 4 hours between 8am and 8pm UTC, via a Netlify build hook and GitHub Actions.</p>
				<p>Feel free to fork from <a href="https://github.com/sarajw/rss-joy-static">the GitHub repo</a>. Or you can look at the <a href="https://github.com/sarajw/rss-joy">client-side version</a>. Enjoy!</p>
			</div>
			<p id="credit">2024 <a href="https://sarajoy.dev">Sara Joy</a></p>
		</footer>
	</body>
</html>